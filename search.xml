<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2019-5-15常见的慧美丰连接归类</title>
      <link href="/2019/05/15/2019-5-15%E5%B8%B8%E8%A7%81%E7%9A%84%E6%85%A7%E7%BE%8E%E4%B8%B0%E8%BF%9E%E6%8E%A5%E5%BD%92%E7%B1%BB/"/>
      <url>/2019/05/15/2019-5-15%E5%B8%B8%E8%A7%81%E7%9A%84%E6%85%A7%E7%BE%8E%E4%B8%B0%E8%BF%9E%E6%8E%A5%E5%BD%92%E7%B1%BB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>安心校园<br>产品原型图 <a href="https://pro.modao.cc/app/7905f46ba8d472bf229ed067b707d69d59da9418#screen=s9D618E7D6E1545878089394" target="_blank" rel="noopener">https://pro.modao.cc/app/7905f46ba8d472bf229ed067b707d69d59da9418#screen=s9D618E7D6E1545878089394</a></p><p>账号密码: hmf 123456</p><p>测试环境<br>测试环境地址 <a href="http://120.79.243.165:8085/login" target="_blank" rel="noopener">http://120.79.243.165:8085/login</a></p><p>swagger地址: <a href="http://120.79.243.165:9008/swagger-ui.html#/" target="_blank" rel="noopener">http://120.79.243.165:9008/swagger-ui.html#/</a></p><p>“start”: “ng serve –host 192.168.2.30 –port 4200 –proxy-config proxy.conf.json”,</p><p>AntDesign <a href="https://ng.ant.design/components/date-picker/zh#header" target="_blank" rel="noopener">https://ng.ant.design/components/date-picker/zh#header</a></p><p>东南大数据<br>产品原型图 <a href="https://pro.modao.cc/app/tfiBmZyppRWoNFPXg4BcqSZyHb0z42L#screen=s29952A4CD21551096091279" target="_blank" rel="noopener">https://pro.modao.cc/app/tfiBmZyppRWoNFPXg4BcqSZyHb0z42L#screen=s29952A4CD21551096091279</a></p><p>测试环境<br>测试环境地址 <a href="http://120.79.243.165:9060/home/enterprise/info" target="_blank" rel="noopener">http://120.79.243.165:9060/home/enterprise/info</a></p><p>测试环境swagger <a href="http://120.79.243.165:9052/swagger-ui.html#/" target="_blank" rel="noopener">http://120.79.243.165:9052/swagger-ui.html#/</a></p><p>李小波：<a href="http://192.168.2.16:9052/swagger-ui.html#!/33021283043041727979255112104622120/getHydroMeterListUsingPOST" target="_blank" rel="noopener">http://192.168.2.16:9052/swagger-ui.html#!/33021283043041727979255112104622120/getHydroMeterListUsingPOST</a></p><p>“start”: “ng serve –host 192.168.2.30 –port 4223 –proxy-config proxy.conf.json”,</p><p>账号密码: admin 123456</p><p>东南大数据监控<br>线上swagger <a href="http://39.108.119.0:9051/swagger-ui.html#/" target="_blank" rel="noopener">http://39.108.119.0:9051/swagger-ui.html#/</a></p><p>测试环境 <a href="http://120.79.243.165:9052" target="_blank" rel="noopener">http://120.79.243.165:9052</a></p><p>安心校园警务大屏<br><a href="http://datav.aliyun.com/share/441a7827d46d7c75cd68c2bf4fbd789d" target="_blank" rel="noopener">http://datav.aliyun.com/share/441a7827d46d7c75cd68c2bf4fbd789d</a></p><p><a href="http://monitor.sc.huimeifeng.xyz/home" target="_blank" rel="noopener">http://monitor.sc.huimeifeng.xyz/home</a></p><p><a href="http://scm.huimeifeng.xyz/home/message/sos" target="_blank" rel="noopener">http://scm.huimeifeng.xyz/home/message/sos</a></p><p>慧美丰智慧社区后台管理<br><a href="http://120.79.243.165:8091/home/sys/station" target="_blank" rel="noopener">http://120.79.243.165:8091/home/sys/station</a></p><p><a href="http://www.manager.huimeifeng.xyz/login" target="_blank" rel="noopener">http://www.manager.huimeifeng.xyz/login</a></p><p>线上 <a href="http://39.108.119.0:9088/hmfmanager/swagger-ui.html#/" target="_blank" rel="noopener">http://39.108.119.0:9088/hmfmanager/swagger-ui.html#/</a></p><p>李小波 <a href="http://192.168.2.16:9088/hmfmanager/swagger-ui.html#/" target="_blank" rel="noopener">http://192.168.2.16:9088/hmfmanager/swagger-ui.html#/</a></p><p>测试 <a href="http://120.79.243.165:9088/hmfmanager/swagger-ui.html#" target="_blank" rel="noopener">http://120.79.243.165:9088/hmfmanager/swagger-ui.html#</a>!</p><p>管理端 <a href="https://pro.modao.cc/app/T0FaVWjtcgC10Dg7JaKF6usNgq7MQ05" target="_blank" rel="noopener">https://pro.modao.cc/app/T0FaVWjtcgC10Dg7JaKF6usNgq7MQ05</a></p><p>管理端 测试版 <a href="https://pro.modao.cc/app/cebb2c346d608a1947c350bfa93ab13d7bfb032f#screen=s7cbc02dcf32475ec768869" target="_blank" rel="noopener">https://pro.modao.cc/app/cebb2c346d608a1947c350bfa93ab13d7bfb032f#screen=s7cbc02dcf32475ec768869</a></p><p>学生端 <a href="https://pro.modao.cc/app/fVBXsrHtKnLo16gpJAJBT3HGBYprv3C" target="_blank" rel="noopener">https://pro.modao.cc/app/fVBXsrHtKnLo16gpJAJBT3HGBYprv3C</a></p><p>教师端 <a href="https://pro.modao.cc/app/3bf8cab55945e6127715776ba0c1e56b38d0657f" target="_blank" rel="noopener">https://pro.modao.cc/app/3bf8cab55945e6127715776ba0c1e56b38d0657f</a></p><p>智慧分班 <a href="https://pro.modao.cc/app/94d624d22387c669f83f738ce24191e726c50e22" target="_blank" rel="noopener">https://pro.modao.cc/app/94d624d22387c669f83f738ce24191e726c50e22</a></p><p>走班排课 <a href="https://pro.modao.cc/app/96eebcb60fb30b71630dc29d263d7a4258437199#screen=sa70b29f5d3c2bd66fa02be" target="_blank" rel="noopener">https://pro.modao.cc/app/96eebcb60fb30b71630dc29d263d7a4258437199#screen=sa70b29f5d3c2bd66fa02be</a></p><p>遗留问题 <a href="https://note.youdao.com/share/?id=bfaeca873167421b546d14e6e65d13fb&amp;type=note#/" target="_blank" rel="noopener">https://note.youdao.com/share/?id=bfaeca873167421b546d14e6e65d13fb&amp;type=note#/</a></p><p>慧美丰官网后期修改 <a href="http://www.huimeifeng2012.com/wmdfw" target="_blank" rel="noopener">http://www.huimeifeng2012.com/wmdfw</a></p><p>慧美丰后台管理系统 可以参考 <a href="http://120.79.243.165:8091/home/property/notice" target="_blank" rel="noopener">http://120.79.243.165:8091/home/property/notice</a></p><p>慧美丰 第三女神<br>阿里云账号 tigerryan <a href="mailto:leziyou5@163.com" target="_blank" rel="noopener">leziyou5@163.com</a></p><p>git地址 <a href="https://code.aliyun.com/" target="_blank" rel="noopener">https://code.aliyun.com/</a></p><p>阿里云邮箱登录 <a href="https://qiye.aliyun.com/alimail/#h=WyJmbV81YzNGdFh6RTNOVjh4TlRNeE5EYzFPRGcyT0RNeSIsWyI1Iiwic3FtXzE3NV8xNTMxNDc1ODg2ODMyIix7InR5cGUiOiJuZXcifSx7ImxhYmVsIjoi5paw6YKu5Lu2In1dXQ==" target="_blank" rel="noopener">https://qiye.aliyun.com/alimail/#h=WyJmbV81YzNGdFh6RTNOVjh4TlRNeE5EYzFPRGcyT0RNeSIsWyI1Iiwic3FtXzE3NV8xNTMxNDc1ODg2ODMyIix7InR5cGUiOiJuZXcifSx7ImxhYmVsIjoi5paw6YKu5Lu2In1dXQ==</a></p><p>云排课接口API：<a href="http://120.79.243.165:9001/swagger-ui.html" target="_blank" rel="noopener">http://120.79.243.165:9001/swagger-ui.html</a></p><p>华志创 云排课 产品原型图 <a href="https://pro.modao.cc/app/T0FaVWjtcgC10Dg7JaKF6usNgq7MQ05#screen=sEE570F7AC21538220017455" target="_blank" rel="noopener">https://pro.modao.cc/app/T0FaVWjtcgC10Dg7JaKF6usNgq7MQ05#screen=sEE570F7AC21538220017455</a></p><p>mui支付 <a href="http://ask.dcloud.net.cn/article/71" target="_blank" rel="noopener">http://ask.dcloud.net.cn/article/71</a></p><p>资产管理模板 <a href="https://pro.modao.cc/app/9whOTYuMR6EWFXkqs6UEwlVEzfw77bY?tdsourcetag=s_pcqq_aiomsg#screen=s0ECD1CA4361534729006623" target="_blank" rel="noopener">https://pro.modao.cc/app/9whOTYuMR6EWFXkqs6UEwlVEzfw77bY?tdsourcetag=s_pcqq_aiomsg#screen=s0ECD1CA4361534729006623</a></p><p>项目账号密码：13037125929 111111ll</p>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-5-13集合类操作经验优化总结</title>
      <link href="/2019/05/13/2019-5-13%E9%9B%86%E5%90%88%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%BB%8F%E9%AA%8C%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
      <url>/2019/05/13/2019-5-13%E9%9B%86%E5%90%88%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%BB%8F%E9%AA%8C%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-set-operation/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-set-operation/index.html</a></p></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Java,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-5-13 Order-By-Clause</title>
      <link href="/2019/05/13/2019-5-13%20Order-By-Clause/"/>
      <url>/2019/05/13/2019-5-13%20Order-By-Clause/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><blockquote><p><a href="https://www.ibm.com/support/knowledgecenter/en/SS6NHC/com.ibm.swg.im.dashdb.sql.ref.doc/doc/r0059211.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/en/SS6NHC/com.ibm.swg.im.dashdb.sql.ref.doc/doc/r0059211.html</a></p></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Java,mysql,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-4-3IOPS和QPS的简介</title>
      <link href="/2019/04/03/2019-4-3IOPS%E5%92%8CQPS%E7%9A%84%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/04/03/2019-4-3IOPS%E5%92%8CQPS%E7%9A%84%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><a href="https://www.jianshu.com/p/ecf4c9ec5371" target="_blank" rel="noopener">https://www.jianshu.com/p/ecf4c9ec5371</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-3-22小虎给的面试题</title>
      <link href="/2019/03/22/filename/"/>
      <url>/2019/03/22/filename/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/2019/03/22/filename/./images/1553223453873.png" alt="enter description here"><br><img src="/2019/03/22/filename/./images/1553223492044.png" alt="enter description here"><br><img src="/2019/03/22/filename/./images/1553223508438.png" alt="enter description here"><br><img src="/2019/03/22/filename/./images/96aa789a60f01ab3e6b2e7e1def26b7.jpg" alt="96aa789a60f01ab3e6b2e7e1def26b7"></p><p>D<br>A<br>C<br>D<br>D<br><a href="https://www.cnblogs.com/Qian123/p/5707562.html#_label2" target="_blank" rel="noopener">https://www.cnblogs.com/Qian123/p/5707562.html#_label2</a><br>先进先出 先进后出 <a href="https://www.jianshu.com/p/2c652195521c" target="_blank" rel="noopener">https://www.jianshu.com/p/2c652195521c</a><br>垃圾回收机制 对内存进行管理和回收资源 <a href="https://blog.csdn.net/qq_32575047/article/details/80931852" target="_blank" rel="noopener">https://blog.csdn.net/qq_32575047/article/details/80931852</a><br>常用的类：BufferedReader  BufferedWriter  FileReader  FileWirter  String  Integer<br>java.util.Date，System，Class，List,HashMap<br>常用的包：java.lang   java.io  java.util  java.sql ,javax.servlet,org.apache.strtuts.action,org.hibernate<br>常用的接口：Remote  List  Map  Document  NodeList ,Servlet,HttpServletRequest,HttpServletResponse,Transaction(Hibernate)、Session(Hibernate),HttpSession<br>流，是指一连串流动的字符，是以先进先出的方式发送和接收数据的通道。</p><p>当先一个流写入数据时，这个流被称为输出流，输出流可以将信息送往程序的外部，如硬盘上的文件、打印机上的文件等。</p><p>输出流：只能从中读取数据，而不能向其中写入数据</p><p>输出流：只能向其中写入数据，而不能从中读取数据</p><p>字节流的操作最小数据单元为8位的字节，而字符流操作的最小数据单元是16位的字符。</p><p>字节流和字符流的区分非常简单，字节流建议用于二进制数据（如图片），而字符流用于文本，它们的用法几乎是完全一样的。</p><p>字节流，字符流。字节流继承于InputStreamOutputStream，字符流继承于InputStreamReader OutputStreamWriter。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。<br>1.继承Thread类<br>2.实现Runnable接口<br>3.实现Callable接口 同步没听说 = =<br><a href="https://segmentfault.com/a/1190000010725979" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010725979</a><br><a href="https://www.nowcoder.com/questionTerminal/0630712a9b234278a15b90270318fcf6?toCommentId=20403" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/0630712a9b234278a15b90270318fcf6?toCommentId=20403</a><br>数据库语句操作直接写入方法里容易出现利用问题 (emmm猜的<br>  select count(*) as num,tb.id<br>                  from<br>                  tb,<br>                  (select role from tb where id=xxx) as t1<br>                  where<br>                  tb.role = t1.role and tb.id != t1.id<br>                  group by tb.id<br>                  having<br>                  num = select count(role) from tb where id=xxx;</p><p><a href="https://blog.csdn.net/Puzzle_48hcy/article/details/71775085" target="_blank" rel="noopener">https://blog.csdn.net/Puzzle_48hcy/article/details/71775085</a> 这个我不会<br>控制反转依赖注入 面向切面<br>将依赖作到了用javabean的方式分配给你 而不是你自己自己去寻找包和依赖 使用的时候只需要通过get的形式注入使用<br>面向切面 通过注入一个切面对代码简洁化的进行例如日志等的监控<br><a href="http://blog.didispace.com/spring-ioc-aop/" target="_blank" rel="noopener">http://blog.didispace.com/spring-ioc-aop/</a><br><a href="https://zhuanlan.zhihu.com/p/31070962" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31070962</a><br><a href="https://www.zhihu.com/question/19993030" target="_blank" rel="noopener">https://www.zhihu.com/question/19993030</a><br>39f7a1ba9aebb243edae6e968cfa75a</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-3-19React Native学习</title>
      <link href="/2019/03/19/2019-3-19React%20Native%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/19/2019-3-19React%20Native%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://www.cnblogs.com/hupo376787/p/9669289.html" target="_blank" rel="noopener">https://www.cnblogs.com/hupo376787/p/9669289.html</a><br><a href="https://blog.programster.org/set-up-android-emulator" target="_blank" rel="noopener">https://blog.programster.org/set-up-android-emulator</a></p>]]></content>
      
      
        <tags>
            
            <tag> 新建,模板,小书匠 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-2-19 Haskell学习笔记</title>
      <link href="/2019/02/19/2019-2-19%20Haskell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/19/2019-2-19%20Haskell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="因为Lyzh大佬的安利作死想了解下Haskell语言于是就有了这个坑-cry"><a href="#因为Lyzh大佬的安利作死想了解下Haskell语言于是就有了这个坑-cry" class="headerlink" title="因为Lyzh大佬的安利作死想了解下Haskell语言于是就有了这个坑 :cry:"></a>因为Lyzh大佬的安利作死想了解下Haskell语言于是就有了这个坑 :cry:</h2><blockquote><p>haskell中不存在0为False 其他数为True这么一说 具体如下<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">True</span> &amp;&amp; <span class="number">11</span></span><br></pre></td></tr></table></figure></p></blockquote><p><interactive>:10:9: error:<br>    ? No instance for (Num Bool) arising from the literal ‘11’<br>    ? In the second argument of ‘(&amp;&amp;)’, namely ‘11’<br>      In the expression: True &amp;&amp; 11<br>      In an equation for ‘it’: it = True &amp;&amp; 11</interactive></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">True</span> &amp;&amp; <span class="number">0</span></span><br></pre></td></tr></table></figure><p><interactive>:11:9: error:<br>    ? No instance for (Num Bool) arising from the literal ‘0’<br>    ? In the second argument of ‘(&amp;&amp;)’, namely ‘0’<br>      In the expression: True &amp;&amp; 0<br>      In an equation for ‘it’: it = True &amp;&amp; 0</interactive></p><pre><code>&gt; Haskell的运算中实际上是没有负数这么一说负数相当于正数再加(-)&gt; 所以出现如下现象</code></pre><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">orochi</span>&gt; <span class="number">1</span><span class="number">-2</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">orochi</span>&gt; <span class="number">1</span>+<span class="number">-2</span></span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:<span class="number">50</span>:<span class="number">2</span>: error:</span><br><span class="line">    ? <span class="type">Variable</span> not <span class="keyword">in</span> scope: (+-) :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; t</span><br><span class="line">    ? <span class="type">Perhaps</span> you meant one <span class="keyword">of</span> these:</span><br><span class="line"></span><br><span class="line">        ‘++’ (imported from <span class="type">Prelude</span>), ‘+’ (imported from <span class="type">Prelude</span>),</span><br><span class="line">        ‘-’ (imported from <span class="type">Prelude</span>)</span><br></pre></td></tr></table></figure><p>再举个运算符优先级的例子<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">1</span> + (<span class="number">4</span> * <span class="number">4</span>)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">1</span> + <span class="number">4</span> * <span class="number">4</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></p><p>这个例子里面一个使用了括号运算符一个没有使用但是结果一样 原因如下<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">orochi</span>&gt; :info (+)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Num</span> a <span class="keyword">where</span></span></span><br><span class="line">  (+) :: a -&gt; a -&gt; a</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">-- Defined in ‘GHC.Num’</span></span><br><span class="line"><span class="keyword">infixl</span> <span class="number">6</span> +</span><br><span class="line"></span><br><span class="line"><span class="title">orochi</span>&gt; :info (*)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Num</span> a <span class="keyword">where</span></span></span><br><span class="line">  ...</span><br><span class="line">  (*) :: a -&gt; a -&gt; a</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">-- Defined in ‘GHC.Num’</span></span><br><span class="line"><span class="keyword">infixl</span> <span class="number">7</span> *</span><br></pre></td></tr></table></figure></p><p>可以看到通过交互式终端GHCI <strong>+</strong> 符号返回了6<br>而 <strong>*</strong> 号通过交互式终端GHCI返回了7<br>7&gt;6所以先执行了乘号</p><p>为了证明此解释 我们使用返回值为8的 <strong>^</strong> 符号进行测试<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(^) :: (<span class="type">Num</span> a, <span class="type">Integral</span> b) =&gt; a -&gt; b -&gt; a <span class="comment">-- Defined in ‘GHC.Real’</span></span><br><span class="line"><span class="keyword">infixr</span> <span class="number">8</span> ^</span><br><span class="line"></span><br><span class="line"><span class="title">orochi</span>&gt; <span class="number">2</span>^<span class="number">3</span> * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure></p><p>可以看到先执行了^之后执行了*最后执行的+</p>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,Haskell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-15学习代码笔记</title>
      <link href="/2019/02/19/2019-1-15%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/19/2019-1-15%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有关Log4J的用法:</p><blockquote><p><a href="https://blog.csdn.net/zjlolife/article/details/8805906" target="_blank" rel="noopener">https://blog.csdn.net/zjlolife/article/details/8805906</a></p></blockquote><p>别人的有关正则的总结</p><blockquote><p><a href="https://blog.csdn.net/ye1992/article/details/25286539" target="_blank" rel="noopener">https://blog.csdn.net/ye1992/article/details/25286539</a></p></blockquote><p>关于java分层的概念</p><blockquote><p><a href="https://www.zhihu.com/question/58410621/answer/156868800" target="_blank" rel="noopener">https://www.zhihu.com/question/58410621/answer/156868800</a></p></blockquote><p>java 中jdk8 steam api介绍(顺序流)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33313312" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33313312</a><br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a><br><a href="https://www.zybuluo.com/changedi/note/622375" target="_blank" rel="noopener">https://www.zybuluo.com/changedi/note/622375</a></p></blockquote><p>java 中jdk8 并行流介绍</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/43039062" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43039062</a></p></blockquote><p>java8 lambda参考介绍</p><blockquote><p><a href="https://www.zybuluo.com/changedi/note/620315" target="_blank" rel="noopener">https://www.zybuluo.com/changedi/note/620315</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> SpringBoot,注解,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-16java有关于Excute和ExcuteQuery和ExcuteUpdate的区别</title>
      <link href="/2019/02/19/2019-1-16java%E6%9C%89%E5%85%B3%E4%BA%8EExcute%E5%92%8CExcuteQuery%E5%92%8CExcuteUpdate%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/02/19/2019-1-16java%E6%9C%89%E5%85%B3%E4%BA%8EExcute%E5%92%8CExcuteQuery%E5%92%8CExcuteUpdate%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><a href="https://blog.csdn.net/u012830807/article/details/17333331" target="_blank" rel="noopener">https://blog.csdn.net/u012830807/article/details/17333331</a><br><a href="https://stackoverflow.com/questions/16625656/statement-executesql-vs-executeupdatesql-and-executequerysql" target="_blank" rel="noopener">https://stackoverflow.com/questions/16625656/statement-executesql-vs-executeupdatesql-and-executequerysql</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> java,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-16 Stream流的学习</title>
      <link href="/2019/02/19/2019-1-16%20Stream%E6%B5%81%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/02/19/2019-1-16%20Stream%E6%B5%81%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).map(n -&gt; <span class="number">2</span> * n + <span class="number">1</span>).average().ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>或者更加简洁的是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).map(n -&gt; <span class="number">2</span> * n + <span class="number">1</span>).average().ifPresent(x -&gt; System.out.println(x));</span><br></pre></td></tr></table></figure></p><p>原本的样子是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> n : <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) &#123;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">     sum += i;</span><br><span class="line">     count++;</span><br><span class="line">   &#125;</span><br><span class="line">   (count &gt; <span class="number">0</span> ? OptionalDouble.of((<span class="keyword">double</span>) sum / count) : OptionalDouble.empty()).ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">       .map(x -&gt; x.substring(<span class="number">1</span>))</span><br><span class="line">       .mapToInt(Integer::parseInt)</span><br><span class="line">       .max()</span><br><span class="line">       .ifPresent(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line">结果为<span class="number">3</span></span><br></pre></td></tr></table></figure><p>substring的用法:</p><blockquote><p>public String substring(int beginIndex)<br>beginIndex – 起始索引（包括）, 索引从 0 开始。</p></blockquote><blockquote><p>public String substring(int beginIndex, int endIndex)<br>endIndex – 结束索引（不包括）。</p></blockquote><p>所以可以看出上面的代码通过substring方法因为只有其实索引所以结果为 a2,a3<br>然后MapToInt后得到 2，3 通过max方法得到3 然后通过最后的ifPreset判断打印出结果<strong>3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">         .mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">         .forEach(x -&gt; System.out.println(x));</span><br><span class="line"> SpringApplication.run(DemoApplication.class, args);</span><br></pre></td></tr></table></figure><p>可以理解为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">4</span> ; i++)</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">        .mapToInt(Double::intValue)</span><br><span class="line">        .mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">        .forEach(x -&gt; System.out.println(x));</span><br><span class="line"></span><br><span class="line">结果为a1 a2 a3</span><br></pre></td></tr></table></figure><p>中间操作的惰性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; sorted = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">          .sorted((i1,i2)-&gt; &#123;</span><br><span class="line">                      System.out.println(i1);</span><br><span class="line">                      <span class="keyword">return</span> i1;</span><br><span class="line">                  &#125;</span><br><span class="line">          );</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>有关于java短路和非短路操作的详细介绍文章参考</p><blockquote><p><a href="https://users.drew.edu/bburd/JavaForDummies6/shortCircuitEval.pdf" target="_blank" rel="noopener">https://users.drew.edu/bburd/JavaForDummies6/shortCircuitEval.pdf</a><br><a href="https://stackoverflow.com/questions/18349330/short-circuit-vs-non-short-circuit-operators/18349426" target="_blank" rel="noopener">https://stackoverflow.com/questions/18349330/short-circuit-vs-non-short-circuit-operators/18349426</a><br><a href="https://stackoverflow.com/questions/7101992/why-do-we-usually-use-not-what-is-the-difference" target="_blank" rel="noopener">https://stackoverflow.com/questions/7101992/why-do-we-usually-use-not-what-is-the-difference</a><br><a href="https://stackoverflow.com/questions/8759868/java-logical-operator-short-circuiting" target="_blank" rel="noopener">https://stackoverflow.com/questions/8759868/java-logical-operator-short-circuiting</a><br><a href="https://stackoverflow.com/questions/9264897/reason-for-the-existence-of-non-short-circuit-logical-operators" target="_blank" rel="noopener">https://stackoverflow.com/questions/9264897/reason-for-the-existence-of-non-short-circuit-logical-operators</a></p></blockquote><p>Optional类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">      Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">      Integer value1 = <span class="keyword">null</span>;</span><br><span class="line">      Integer value2 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(java8Tester.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">"第一个参数值存在: "</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">"第二个参数值存在: "</span> + b.isPresent());</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span><br><span class="line">      Integer value1 = a.orElse(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Optional.get - 获取值，值需要存在</span></span><br><span class="line">      Integer value2 = b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">" abcd "</span>, strB = <span class="keyword">null</span>;</span><br><span class="line">print(strA);</span><br><span class="line">print(<span class="string">""</span>);</span><br><span class="line">print(strB);</span><br><span class="line">getLength(strA);</span><br><span class="line">getLength(<span class="string">""</span>);</span><br><span class="line">getLength(strB);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Java 8</span></span><br><span class="line"> Optional.ofNullable(text).ifPresent(System.out::println);</span><br><span class="line"> <span class="comment">// Pre-Java 8</span></span><br><span class="line"> <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line"> System.out.println(text);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Java 8</span></span><br><span class="line"><span class="keyword">return</span> Optional.ofNullable(text).map(String::length).orElse(-<span class="number">1</span>);</span><br><span class="line"> <span class="comment">// Pre-Java 8</span></span><br><span class="line"><span class="comment">// return if (text != null) ? text.length() : -1;</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>很重要的Java学习路线介绍</strong></p><blockquote><blockquote><p><a href="http://www.zuoxiaolong.com/html/article_287.html" target="_blank" rel="noopener">http://www.zuoxiaolong.com/html/article_287.html</a></p></blockquote></blockquote><p>先过滤再排序再转类型尽量减少操作步骤性能</p><p><strong>由于流的在执行了终端操作后就会不能复用所以会导致如下的代码的问题</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"a1"</span>,<span class="string">"b1"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>)</span><br><span class="line">.filter(s -&gt; s.startsWith(<span class="string">"b"</span>));</span><br><span class="line"></span><br><span class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>);</span><br><span class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Exception in thread <span class="string">"main"</span> java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="line">at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:<span class="number">229</span>)</span><br><span class="line">at java.util.stream.ReferencePipeline.noneMatch(ReferencePipeline.java:<span class="number">459</span>)</span><br><span class="line">at com.example.demo.DemoApplication.main(DemoApplication.java:<span class="number">58</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringBoot,学习笔记,java,Stream </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-25 SimpleDateFormat的parse和format用法</title>
      <link href="/2019/02/19/2019-1-25%20SimpleDateFormat%E7%9A%84parse%E5%92%8Cformat%E7%94%A8%E6%B3%95/"/>
      <url>/2019/02/19/2019-1-25%20SimpleDateFormat%E7%9A%84parse%E5%92%8Cformat%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date now = DateUtil.now();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-2-14 mysql通过时间判断七天出现的次数统计</title>
      <link href="/2019/02/19/2019-2-14%20mysql%E9%80%9A%E8%BF%87%E6%97%B6%E9%97%B4%E5%88%A4%E6%96%AD%E4%B8%83%E5%A4%A9%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
      <url>/2019/02/19/2019-2-14%20mysql%E9%80%9A%E8%BF%87%E6%97%B6%E9%97%B4%E5%88%A4%E6%96%AD%E4%B8%83%E5%A4%A9%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.date_list,<span class="keyword">ifnull</span>(b.count,<span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">count</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">     <span class="keyword">select</span> <span class="keyword">curdate</span>() <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">2</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">3</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">4</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">5</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">  <span class="keyword">union</span> all</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="keyword">curdate</span>(),<span class="built_in">interval</span> <span class="number">6</span> <span class="keyword">day</span>) <span class="keyword">as</span> date_list</span><br><span class="line">            ) <span class="keyword">as</span> a <span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">              <span class="keyword">select</span> <span class="built_in">date</span>(gmt_create) <span class="keyword">as</span> datetime,<span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">from</span> alarm_message <span class="keyword">where</span> student_status = <span class="string">"OUT_OF_SCHOOL"</span></span><br><span class="line">              <span class="keyword">group</span> <span class="keyword">by</span> <span class="built_in">date</span>(gmt_create)</span><br><span class="line">       ) <span class="keyword">as</span> b <span class="keyword">on</span> a.date_list = b.datetime</span><br></pre></td></tr></table></figure><blockquote><blockquote><p><a href="https://blog.csdn.net/ouyang111222/article/details/77638826" target="_blank" rel="noopener">https://blog.csdn.net/ouyang111222/article/details/77638826</a></p></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> mysql,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-2-15关于文件夹右键菜单的清理问题-注册表方法</title>
      <link href="/2019/02/19/2019-2-15%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E7%9A%84%E6%B8%85%E7%90%86%E9%97%AE%E9%A2%98-%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/19/2019-2-15%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E7%9A%84%E6%B8%85%E7%90%86%E9%97%AE%E9%A2%98-%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>(1)所有或大部分文件都有的右键菜单<br>打开注册表编辑器后，在[HKEY_CLASSES_ROOT*\Shellex\ContextMenuHandlers]，根据名称删除相应的子项。<br>(2)文件夹的右键菜单<br>在注册表中的[HKEY_CLASSES_ROOT\Directory\Shell和HKEY_CLASSES_ROOT\Directory\Shellex\ContextMenuHandlers]下，寻找对应的名称并删除。如果在这里找不到，可以在HKEY_CLASSES_ROOT\Folder\shell和HKEY_CLASSES_ROOT\Folder\shellex\ContextMenuHandlers分支里找到。<br>(3)右键的“新建”菜单<br>注册表中的HKEY_COASSES_ROOT根键下存放着所有文件类型的信息，如[HKEY_CLASSES_ROOT*.doc]就是Word文档的相关信息，在右键菜单的“新建”菜单中发现了“新建Word文档”的选项，那么在这个键值下删除“Shellnew”后，右键的“新建”菜单中就没有了“新建Word文档”的选项，其它类型的文件我们也可以这样操作。<br>(4)打开方式<br>一种类型的文件会有很多种打开方式，如右击一个txt文件，在打开方式菜单下可能会有“记事本”、“写字板”等在删除它们可以在[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\fileExts]和[HKEY_CLASSES_ROOT\SystemFileAssociations]下找到相应的扩展名子项，然后在“OpenWithList”子项中删除不需要的键值即可。</p>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,注册表清理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-2-17 普通心理学学习笔记</title>
      <link href="/2019/02/19/2019-2-17%20%E6%99%AE%E9%80%9A%E5%BF%83%E7%90%86%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/19/2019-2-17%20%E6%99%AE%E9%80%9A%E5%BF%83%E7%90%86%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="个体心理现象的三个重要方面"><a href="#个体心理现象的三个重要方面" class="headerlink" title="个体心理现象的三个重要方面"></a>个体心理现象的三个重要方面</h2><p>认知，动机和情绪、能力和人格是个体心理现象的三个重要方面，是心理学的主要研究对象</p><blockquote><p>例如认知的需要会推动人去探索世界，交往的需要会推动人去建立各种人际关系，并获得各种各样的情绪体验，人的需求的产生和发展依赖于认知。</p></blockquote><p>也就是说一个人的知识会很大程度决定他的认知以及左右他的动机也就是他的能力和人格的体现</p><h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><blockquote><p>行为是有机体的反应系统。主要由一系列的反应动作组成，成为各种特定的反应系统<br>行为总是在一定的<strong>刺激情景</strong>下产生。<strong>引起行为的内外因素叫做刺激</strong><br>引起行为的刺激常常通过心理的中介而引起作用。<strong>人的行为的复杂性是由心理活动的复杂性引起的</strong> 主观世界的不同会使得对同一刺激反应的状况可能不一样。<br>对于理解外部行为的反应最主要的是需要理解人的内部心理过程<br>心里支配行为，通过行为表现出来，心理现象是一种主观精神现象，类似黑盒。<br>只有对黑盒进行一定量的测量分析以及记录，来进行客观的研究人的心理活动 <strong>从外部行为推测内部心理过程，是心理学研究的一条基本法则</strong> </p></blockquote><hr><h3 id="个体意识和无意识"><a href="#个体意识和无意识" class="headerlink" title="个体意识和无意识"></a>个体意识和无意识</h3><blockquote><p>人的活动具有明确的目的，能够预先计划达到目的的方法和手段，或者说人的意识表现为人能够计划自己的活动。<br>人的意识还表现在人能够觉察到外部事物的存在和自己内部心理活动，能够把自我与非我，主体与客观区别开来。也就是说人不仅能意识到客体的存在，而且具有自我意识。正是因为自我意识的存在使得人能自我分析，自我评价，自我调节和控制。(个人认为是人步入成熟的一个重要表现之一，毕竟婴儿和孩童的世界观等意识都还不完善所以某种程度上可以说没有自我意识)<br>注意是与意识有密切关系的一种心理现象 <strong>注意是意识对事物和活动的指向和集中</strong> 注意指向的活动往往也是人能意识到的活动。<strong>注意的基本作用是选择信息</strong> </p></blockquote><hr><h3 id="个体心理与社会心理"><a href="#个体心理与社会心理" class="headerlink" title="个体心理与社会心理"></a>个体心理与社会心理</h3><blockquote><p>社会心理与个体心理的关系，是共性与个性心理的关系。社会心理是在社会的共同生活条件和环境下产生的，是该社会内个体心理特征的典型表现，而不是个体心理特征的简单总和。社会心理离不开个体的心理。同时社会心理也是个体心理的一种具体的社会现实，会影响到个体的心理与个体意识的形成与发展。<br>最简单的例子就是当人意识到不合群后的社会从众心理(突然就想到了乌合之众是什么操作)。这也就是社会心理对个体行为的影响的一个例子。</p></blockquote><hr><h2 id="心理学的基本任务"><a href="#心理学的基本任务" class="headerlink" title="心理学的基本任务"></a>心理学的基本任务</h2><p>==心理学的基本任务是探索心理现象发生、发展和变化的规律 #F44336==</p><h3 id="心理过程"><a href="#心理过程" class="headerlink" title="心理过程"></a>心理过程</h3><blockquote><p>人的心理现象是在时间上展开的，它表现为一定的过程 :wink: 认知过程，情绪过程，技能形成过程，知觉过程等。<br>如下示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 物体</span><br><span class="line">op1=&gt;operation: 眼睛接受来自光的物体的光刺激</span><br><span class="line">cond1=&gt;condition: 接受</span><br><span class="line">或者没有接收</span><br><span class="line">op2=&gt;operation: 神经系统加工把光刺激转换为神经冲动.</span><br><span class="line">io1=&gt;inputoutput: 察觉到物体的存在</span><br><span class="line">op2=&gt;operation: 将要看到的物体从所处的环境或背景中区分出来</span><br><span class="line">op3=&gt;operation: 确认物体</span><br><span class="line">io2=&gt;inputoutput: 没有辨别出来</span><br><span class="line">e1=&gt;end: 辨认出物体叫出物体名称</span><br><span class="line">e2=&gt;end: 没有辨认出物体</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2-&gt;io1-&gt;op3-&gt;e1</span><br><span class="line">cond1(no)-&gt;io2-&gt;e2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>人的情绪亦是如此，从情绪的发生，发展到消失，同样有一定的时间展开性。而分析心理现象的时间进程，对科学地揭示心理活动得规律是很重要的。</p></blockquote><h3 id="心理结构"><a href="#心理结构" class="headerlink" title="心理结构"></a>心理结构</h3><blockquote><p>人拥有的各种观念和概念都是相互联系的。<strong>研究心理结构就是要揭示各种心理现象之间的联系和关系</strong> 研究心理现象之间的内在联系，是心理学的一个重要任务。</p></blockquote><h3 id="心理的脑机制"><a href="#心理的脑机制" class="headerlink" title="心理的脑机制"></a>心理的脑机制</h3><blockquote><p>心理是神经系统的机能，特别是脑的机能，一个健康发育的神经系统，是各种心理现象发生和发展的物质基础。因此要深入研究心理的脑机制，揭示脑与心理现象的关系。</p></blockquote><hr><h2 id="心理现象的发生与发展"><a href="#心理现象的发生与发展" class="headerlink" title="心理现象的发生与发展"></a>心理现象的发生与发展</h2><blockquote><p>人的心理现象是进化过程的产物。从物种角度看，心理现象是动物发展到一定阶段，在出现了神经系统之后才真正产生的。<br>从个体的角度看，脑的发育为心理的发生和发展提供了基础。研究心理现象的种系发展和个体发展以及它们的脑发育的关系，也是心理学的重要任务</p></blockquote><hr><h2 id="心理与环境"><a href="#心理与环境" class="headerlink" title="心理与环境"></a>心理与环境</h2>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-9后台代码学习SocialMember模块笔记</title>
      <link href="/2019/01/11/2019-1-9%E5%90%8E%E5%8F%B0%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0SocialMember%E6%A8%A1%E5%9D%97%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/11/2019-1-9%E5%90%8E%E5%8F%B0%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0SocialMember%E6%A8%A1%E5%9D%97%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="关于Lambda语法糖和stream流写法"><a href="#关于Lambda语法糖和stream流写法" class="headerlink" title="关于Lambda语法糖和stream流写法"></a>关于Lambda语法糖和stream流写法</h2><p>==一般来讲以Example结尾的实体类是Entity(自动生成类)的对于增删查改条件查询的方法做的自动化生成的查询参数的生成 #9e9e9e==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SocialMemberPo&gt; list = socialMemberMapext.queryMemberList(dto.getSocialId(), dto.getName(),</span><br><span class="line">               dto.getIdCardNumber(), dto.getTel(), dto.getRoomId());</span><br><span class="line">    list.stream().forEach(item -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (Strings.isNotBlank(item.getSex())) &#123;</span><br><span class="line">               item.setSex(item.getSex().equals(<span class="string">"MALE"</span>) ? <span class="string">"男"</span> : <span class="string">"女"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SocialMemberPo&gt; list = socialMemberMapext.queryMemberList(dto.getSocialId(), dto.getName(),</span><br><span class="line">               dto.getIdCardNumber(), dto.getTel(), dto.getRoomId());</span><br><span class="line"> <span class="keyword">for</span> (SocialMemberPo socialMemberPo : list) &#123;</span><br><span class="line">           <span class="keyword">if</span> (Strings.isNotBlank(socialMemberPo.getSex())) &#123;</span><br><span class="line">               socialMemberPo.setSex(socialMemberPo.getSex().equals(<span class="string">"MALE"</span>) ? <span class="string">"男"</span> : <span class="string">"女"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>可以看到前者使用Java 8 API中的Stream流的写法和Lambda表达式而后者就是传统的代码</strong></p><p>==分析此代码可以看出 #800000==</p><p><strong>在正常的普通代码中我们通过遍历foreach的写法查询list这个集合调用Strings^[具体可以参考如下String API <a href="https://logging.apache.org/log4j/2.0/log4j-api/apidocs/org/apache/logging/log4j/util/Strings.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.0/log4j-api/apidocs/org/apache/logging/log4j/util/Strings.html</a>]这个类的isNotBlank方法来判断是否传入的空白如果不是空白就通过get和set方法传出(在此处是通过对equal方法的调用和通过运算符的判断如果满足MALE则返回的是男否则女.而在前者中我们可以看到通过流的写法简化了通过调用list对象的流的forEach方法直接遍历原本的SocialMemberPo实体类然后通过</strong>Lambda<strong>函数式编程的思想通过item中间类直接操作get和set等方法借以简化代码</strong></p><h2 id="isNotBlank-和isNotEmpty-的区别"><a href="#isNotBlank-和isNotEmpty-的区别" class="headerlink" title="isNotBlank()和isNotEmpty()的区别**"></a>isNotBlank()和isNotEmpty()的区别**</h2><hr><p><strong>1. null是没有地址的，可以理解为空指针，当对象在构建器初始化时，如果没有被显示赋于初值，那么默认会默认赋值为null</strong><br><strong>2. “”空字符串是一个String对象是有地址的，只是内容为空。</strong></p><p><em>再比如下面这个代码</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SupplierSyn&gt; synList = supplierSynMapper.selectByExample(supplierSynExample);</span><br><span class="line">       <span class="keyword">if</span> (synList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           SupplierSyn supplierSyn = synList.get(<span class="number">0</span>);</span><br><span class="line">           list.forEach(item -&gt; &#123;</span><br><span class="line">               <span class="keyword">if</span> (supplierSyn.getSynSupplierList().equals(item.getSynedSupplier())) &#123;</span><br><span class="line">                   item.setSynStatus(SynStatusEnum.SYNCHRONIZED.name());</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   item.setSynStatus(SynStatusEnum.NOT_SYNCHRONIZED.name());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SupplierSyn&gt; synList = supplierSynMapper.selectByExample(supplierSynExample);</span><br><span class="line">   <span class="keyword">if</span> (synList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       SupplierSyn supplierSyn = synList.get(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">for</span> (SocialMemberPo item : list) &#123;</span><br><span class="line">           <span class="keyword">if</span> (supplierSyn.getSynSupplierList().equals(item.getSynedSupplier())) &#123;</span><br><span class="line">               item.setSynStatus(SynStatusEnum.SYNCHRONIZED.name());</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               item.setSynStatus(SynStatusEnum.NOT_SYNCHRONIZED.name());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>可以轻易的看出前者使用流和Lambda表达式将item直接作为中间类的形式进行调用get和set方法传值和赋值然后通过list的forEach操作遍历循环。</strong></p>]]></content>
      
      
        <tags>
            
            <tag> SpringBoot,注解,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-1-10记一次尝试写需求失败笔记</title>
      <link href="/2019/01/11/2019-1-10%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E5%86%99%E9%9C%80%E6%B1%82%E5%A4%B1%E8%B4%A5%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/11/2019-1-10%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E5%86%99%E9%9C%80%E6%B1%82%E5%A4%B1%E8%B4%A5%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="关于Mybatis的笔记记录"><a href="#关于Mybatis的笔记记录" class="headerlink" title="关于Mybatis的笔记记录"></a>关于Mybatis的笔记记录</h2><h4 id="Mybatis的xml数据库映射关系"><a href="#Mybatis的xml数据库映射关系" class="headerlink" title="Mybatis的xml数据库映射关系"></a>Mybatis的xml数据库映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.orochi.manager.dal.dao.model.helloWorldMapext"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"helloWorldMap"</span> <span class="attr">type</span>=<span class="string">"com.orochi.manager.dal.model.helloWorldPo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"room_id"</span> <span class="attr">property</span>=<span class="string">"roomId"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"date_created"</span> <span class="attr">property</span>=<span class="string">"dateCreated"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"date_without_time"</span> <span class="attr">property</span>=<span class="string">"dateWithoutTime"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">selsect</span> <span class="attr">id</span>=<span class="string">"getHelloWorldList"</span> <span class="attr">resultMap</span>=<span class="string">"helloWorldMap"</span> <span class="attr">parameterType</span>=<span class="string">"com.orochi.manager.dal.model.dto.helloWorldDto"</span>&gt;</span></span><br><span class="line"> SELECT a.id,</span><br><span class="line">       a.id,</span><br><span class="line">       b.name,</span><br><span class="line">       b.room_id,</span><br><span class="line">       c.date_created,</span><br><span class="line">       c.date_without_time</span><br><span class="line">FROM recharge_record as a</span><br><span class="line">       inner join safety_campus.user as b on [CONDITION] </span><br><span class="line">   inner join goods_price as c on [CONDITION] </span><br><span class="line">   inner join user_vip_info as d on [CONDITION]</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">[CONDITION]</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过分析上述的xml代码可以看出<br>id ==&gt; id<br>name ==&gt; name<br>room_id ==&gt; roomId<br>date_created ==&gt; dateCreated<br>date_without_time ==&gt; dateWithoutTime </p><table><thead><tr><th>数据库的字段中的字段</th><th>你的实体类中的参数</th><th>映射的数据类型</th></tr></thead><tbody><tr><td>id</td><td>id</td><td>BIGINT</td></tr><tr><td>name</td><td>name</td><td>VARCHAR</td></tr><tr><td>room_id</td><td>roomId</td><td>BIGINT</td></tr><tr><td>date_created</td><td>dateCreated</td><td>TIMESTAMP^[TIMESTAMP 传送的主要拥有年月日和时分秒的时间戳]</td></tr><tr><td>date_without_time</td><td>dateWithoutTime</td><td>DATE^[DATE 传送的主要是年月日 没有时分秒]</td></tr></tbody></table><h3 id="有关Java和Mysql数据类型对应关系表"><a href="#有关Java和Mysql数据类型对应关系表" class="headerlink" title="有关Java和Mysql数据类型对应关系表"></a>有关Java和Mysql数据类型对应关系表</h3><table><thead><tr><th>类型名称</th><th>显示长度</th><th>数据库数据类型</th><th>Java类型</th></tr></thead><tbody><tr><td>VARCHAR</td><td>L+N</td><td>VARCHAR</td><td>java.lang.String</td></tr><tr><td>CHAR</td><td>N</td><td>CHAR</td><td>java.lang.String</td></tr><tr><td>BLOB</td><td>L+N</td><td>BLOB</td><td>java.lang.byte[]</td></tr><tr><td>TEXT</td><td>65535</td><td>VARCHAR</td><td>java.lang.String</td></tr><tr><td>INTEGER</td><td>4</td><td>INTEGER UNSIGNED</td><td>java.lang.Long</td></tr><tr><td>TINYINT</td><td>3</td><td>TINYINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>SMALLINT</td><td>5</td><td>SMALLINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>MEDIUMINT</td><td>8</td><td>MEDIUMINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>BIT</td><td>1</td><td>BIT</td><td>java.lang.Boolean</td></tr><tr><td>BIGINT</td><td>20</td><td>BIGINT UNSIGNED</td><td>java.math.BigInteger</td></tr><tr><td>FLOAT</td><td>4+8</td><td>FLOAT</td><td>java.lang.Float</td></tr><tr><td>DOUBLE</td><td>22</td><td>DOUBLE</td><td>java.lang.Double</td></tr><tr><td>DECIMAL</td><td>11</td><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>BOOLEAN</td><td>1</td><td>同TINYINT</td><td>同TINYINT</td></tr><tr><td>ID</td><td>11</td><td>PK (INTEGER UNSIGNED)</td><td>java.lang.Long</td></tr><tr><td>DATE</td><td>10</td><td>DATE</td><td>java.sql.Date</td></tr><tr><td>TIME</td><td>8</td><td>TIME</td><td>java.sql.Time</td></tr><tr><td>DATETIME</td><td>19</td><td>DATETIME</td><td>java.sql.Timestamp</td></tr><tr><td>TIMESTAMP</td><td>19</td><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr><tr><td>YEAR</td><td>4</td><td>YEAR</td><td>java.sql.Date</td></tr></tbody></table><h3 id="有关于INNER-JOIN-、RIGHT-JOIN-和-LEFT-JOIN的比较"><a href="#有关于INNER-JOIN-、RIGHT-JOIN-和-LEFT-JOIN的比较" class="headerlink" title="有关于INNER JOIN 、RIGHT JOIN 和 LEFT JOIN的比较"></a>有关于INNER JOIN 、RIGHT JOIN 和 LEFT JOIN的比较</h3><p>如图^[借用来自stackoverflow一大佬的回复插图  <a href="https://stackoverflow.com/questions/5706437/whats-the-difference-between-inner-join-left-join-right-join-and-full-join" target="_blank" rel="noopener">https://stackoverflow.com/questions/5706437/whats-the-difference-between-inner-join-left-join-right-join-and-full-join</a>]<br><img src="https://i.stack.imgur.com/VQ5XP.png" alt=""></p><p>具体详细介绍可以参考 <a href="https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins" target="_blank" rel="noopener">https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins</a></p><p><em>有关于MYSQL函数大全及用法示例</em> 具体的可以参考 <a href="https://www.cnblogs.com/xuyulin/p/5468102.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuyulin/p/5468102.html</a>这篇博文</p>]]></content>
      
      
        <tags>
            
            <tag> SpringBoot,注解,学习笔记,Mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-9-12 Spring学习笔记</title>
      <link href="/2018/09/12/2018-9-12%20Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/12/2018-9-12%20Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Spring有关Bean的配置中如果value中存在尖括号-lt-gt-或者其他特殊字符你可以通过内部使用-lt-value-gt-lt-value-gt-标签进行添加并进行转义-CDATA"><a href="#Spring有关Bean的配置中如果value中存在尖括号-lt-gt-或者其他特殊字符你可以通过内部使用-lt-value-gt-lt-value-gt-标签进行添加并进行转义-CDATA" class="headerlink" title="Spring有关Bean的配置中如果value中存在尖括号(&lt;&gt;)或者其他特殊字符你可以通过内部使用&lt;value&gt;&lt;/value&gt; 标签进行添加并进行转义([CDATA[]])"></a>Spring有关Bean的配置中如果value中存在尖括号(&lt;&gt;)或者其他特殊字符你可以通过内部使用&lt;value&gt;&lt;/value&gt; 标签进行添加并进行转义([CDATA[]])</h2><p>例如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"&lt;Shanghai&gt;"</span>  <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你会发现bean加载的时候会报错<br><strong>这时候可以利用&lt;value&gt;&lt;/value&gt;中添加&lt;![CDATA[&lt;&gt;]]&gt;的形式来写</strong></p><p>所以如上例子可以写成<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;constructor-arg type="</span><span class="attr">java.lang.String</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;ShangHai&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="如果你需要再bean中能相互访问其他的bean你可以通过ref属性的形式或者写一匿名内部bean"><a href="#如果你需要再bean中能相互访问其他的bean你可以通过ref属性的形式或者写一匿名内部bean" class="headerlink" title="如果你需要再bean中能相互访问其他的bean你可以通过ref属性的形式或者写一匿名内部bean"></a>如果你需要再bean中能相互访问其他的bean你可以通过ref属性的形式或者写一匿名内部bean</h4><ol><li>使用ref属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Cars"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"BMW"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;ShangHai&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>250<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car2"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>或者也可以这么写<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>使用匿名内部bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Ford"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"ChangAn"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"200000"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>==内部bean的id标记无效 #e91e63==</p><h2 id="对于spring级联属性的例子"><a href="#对于spring级联属性的例子" class="headerlink" title="对于spring级联属性的例子"></a>对于spring级联属性的例子</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prperty</span> <span class="attr">name</span>=<span class="string">"car.maxSpeed"</span> <span class="attr">value</span>=<span class="string">"250"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到直接可以在bean里面直接赋值了<br><strong>注意如果在之前没有在赋值之前初始化属性是不可以赋值的</strong></p><h2 id="配置集合类型属性"><a href="#配置集合类型属性" class="headerlink" title="配置集合类型属性"></a>配置集合类型属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"com.example.spring.beans.Person"</span><span class="attr">.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Mike"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"27"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Ford"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"ChangAn"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"200000"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Map属性"><a href="#配置Map属性" class="headerlink" title="配置Map属性"></a>配置Map属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"NewPerson"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.beans.NewPerson"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Rose"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 接下来是一个使用map节点及map的entry子节点配置Map类型的成员变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"AA"</span><span class="attr">value-ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"BB"</span> <span class="attr">value-ref</span>=<span class="string">"car2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置properties属性值"><a href="#配置properties属性值" class="headerlink" title="配置properties属性值"></a>配置properties属性值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.example.spring.bean.DataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> spring, 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-29对于SpringBoot的静态资源的映射规则学习</title>
      <link href="/2018/08/29/2018-8-29%E5%AF%B9%E4%BA%8ESpringBoot%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/08/29/2018-8-29%E5%AF%B9%E4%BA%8ESpringBoot%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="SpringBoot对静态资源的映射规则"><a href="#SpringBoot对静态资源的映射规则" class="headerlink" title="SpringBoot对静态资源的映射规则"></a>SpringBoot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache()</span><br><span class="line">.getCachecontrol().toHttpCacheControl();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry</span><br><span class="line">.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod))</span><br><span class="line">.setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;</span><br><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment"> * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br></pre></td></tr></table></figure><h3 id="使用webjars"><a href="#使用webjars" class="headerlink" title="使用webjars"></a>使用webjars</h3><p><strong>所有/webjars/</strong>**; 都去classpath:META-INF/resources/webjars/找资源<br>webjars:以jar包的形式引入静态资源 <a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a><br>例如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入webjars中的bootstraps依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>目录结构如下:<br><img src="/2018/08/29/2018-8-29对于SpringBoot的静态资源的映射规则学习/1.png" alt=""><br>可以看到由于导入了maven依赖在maven扩展中已经导入了相应的包根据规则找到了bootstrap类路径和他的META-INF从而找了该静态文件的引用</p><h3 id="使用自定义的模块"><a href="#使用自定义的模块" class="headerlink" title="使用自定义的模块"></a>使用自定义的模块</h3><p><strong>使用/*</strong>*访问当前项目的任何资源<br>    &gt;&gt; classpath:/META-INF/resources/<br>    &gt;&gt; classpath: /resources/<br>    &gt;&gt; classpath: /static/<br>    &gt;&gt; classpath: /public/<br>    &gt;&gt; / 当前项目的根路径</p><h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3><p><strong>静态资源文件夹下的所有index.html页面 都会被/**</strong> 映射<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomePageHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(WelcomePageHandlerMapping.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;MediaType&gt; MEDIA_TYPES_ALL = Collections</span><br><span class="line">.singletonList(MediaType.ALL);</span><br><span class="line"></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage,</span><br><span class="line">String staticPathPattern) &#123;</span><br><span class="line"><span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">"/**"</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">logger.info(<span class="string">"Adding welcome page: "</span> + welcomePage.get());</span><br><span class="line">setRootViewName(<span class="string">"forward:index.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders,</span><br><span class="line">applicationContext)) &#123;</span><br><span class="line">logger.info(<span class="string">"Adding welcome page template: index"</span>);</span><br><span class="line">setRootViewName(<span class="string">"index"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="所有的-favicon-ico-都是在静态资源文件下找到的"><a href="#所有的-favicon-ico-都是在静态资源文件下找到的" class="headerlink" title="所有的**/favicon.ico 都是在静态资源文件下找到的"></a>所有的**/favicon.ico 都是在静态资源文件下找到的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">requestHandler.setLocations(resolveFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">resolveFaviconLocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String[] staticLocations = getResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">List&lt;Resource&gt; locations = <span class="keyword">new</span> ArrayList&lt;&gt;(staticLocations.length + <span class="number">1</span>);</span><br><span class="line">Arrays.stream(staticLocations).map(<span class="keyword">this</span>.resourceLoader::getResource)</span><br><span class="line">.forEach(locations::add);</span><br><span class="line">locations.add(<span class="keyword">new</span> ClassPathResource(<span class="string">"/"</span>));</span><br><span class="line"><span class="keyword">return</span> Collections.unmodifiableList(locations);</span><br></pre></td></tr></table></figure><p>所起到的作用就是更改页面的ico 默认能在所有的静态资源文件夹的路径里扫描添加</p>]]></content>
      
      
        <tags>
            
            <tag> springboot, 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-28学习公司多模块项目的理解</title>
      <link href="/2018/08/28/2018-8-28%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%8F%B8%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/28/2018-8-28%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%8F%B8%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="多模块的maven的pom的主pom主要是通用的给在公共的主pom里-模块单独需要的就给在各个模块里面调用"><a href="#多模块的maven的pom的主pom主要是通用的给在公共的主pom里-模块单独需要的就给在各个模块里面调用" class="headerlink" title="多模块的maven的pom的主pom主要是通用的给在公共的主pom里 模块单独需要的就给在各个模块里面调用"></a>多模块的maven的pom的主pom主要是通用的给在公共的主pom里 模块单独需要的就给在各个模块里面调用</h2><p><strong>另外 pom主要写法是</strong></p><h3 id="主pom"><a href="#主pom" class="headerlink" title="主pom"></a>主pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>*-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">/*<span class="tag">&lt;<span class="name">module</span>&gt;</span>*-dal<span class="tag">&lt;/<span class="name">module</span>&gt;</span>公司自己改的dal一般不是这个*/</span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>*-dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>*-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>*-controller<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">/*<span class="tag">&lt;<span class="name">module</span>&gt;</span>*-app<span class="tag">&lt;/<span class="name">module</span>&gt;</span>公司自己改的将controller封装在里面了*/</span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="以下是具体的主pom实例"><a href="#以下是具体的主pom实例" class="headerlink" title="以下是具体的主pom实例"></a>以下是具体的主pom实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>web-course-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>web-course-dal<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>web-course-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>web-course-app<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>web-course<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--项目依赖 start--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-dal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分pom"><a href="#分pom" class="headerlink" title="分pom"></a>分pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>主项目的id<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*-你要调取的其他层<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*-你要调用的其他层<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分pom实例部分代码"><a href="#分pom实例部分代码" class="headerlink" title="分pom实例部分代码"></a>分pom实例部分代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-dal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-course-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> springboot, maven, 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-14配置文件加载位置</title>
      <link href="/2018/08/14/2018-8-14%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE/"/>
      <url>/2018/08/14/2018-8-14%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="SpringBoot启动的时候默认会从以下位置的application-properties或者application-yml文件作为SpringBoot的默认配置文件"><a href="#SpringBoot启动的时候默认会从以下位置的application-properties或者application-yml文件作为SpringBoot的默认配置文件" class="headerlink" title="SpringBoot启动的时候默认会从以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件"></a>SpringBoot启动的时候默认会从以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件</h2><p>优先级从上到下由高到低:<br>-file: ./config/<br>-file: ./<br>- classpath:/config/<br>- classpath:/</p><p>SpringBoot会从这四个位置全部加载主配置文件;会产生 <strong>互补配置</strong>;<br>比方说 在高优先级设置了端口 <strong>(server.port=8081)</strong> 然后再低优先级别的设置了 <strong>(server.context-path=/boot02)</strong>  这时候如果我们直接访问8080是访问不到的 同样访问8081也是访问不到的  原因是访问路径生效了<br>正确的访问路径应该是 <strong>localhost:8081/boot02/你要访问的name</strong></p><h3 id="通过spring-config-location可以改变默认的配置文件位置"><a href="#通过spring-config-location可以改变默认的配置文件位置" class="headerlink" title="通过spring.config.location可以改变默认的配置文件位置"></a>通过spring.config.location可以改变默认的配置文件位置</h3><p>(在开发阶段还没打包发布时候 在任何的properties里面添加该配置如果原有端口设置 都是不生效的)</p><p>我们可以在项目打包好以后 通过运维(命令行参数)的形式,启动项目的时候来指定配置文件的新位置;指定的配置文件和默认加载的这些配置文件会一起共同起作用形成互补配置<br>例如:</p><blockquote><blockquote><p>java -jar XXX.jar –spring.config.location=你要添加的配置文件配置目录</p></blockquote></blockquote><p>此时会覆盖原有的配置项实现互补配置</p>]]></content>
      
      
        <tags>
            
            <tag> springboot,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-14 properfile的学习</title>
      <link href="/2018/08/14/2018-8-14%20properfile%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/08/14/2018-8-14%20properfile%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="1-多profile文件"><a href="#1-多profile文件" class="headerlink" title="1.多profile文件"></a>1.多profile文件</h2><p>文件名可以是application-{profile}.properties/yml<br>例如application-dev.properties<br>&nbsp;&nbsp;&nbsp;&nbsp;application-test.properties<br>然后会发现默认使用的是application.properties配置</p><h2 id="2-yml支持多文档块方式"><a href="#2-yml支持多文档块方式" class="headerlink" title="2.yml支持多文档块方式"></a>2.yml支持多文档块方式</h2><p>利用 — 写入多个文档块<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   profiles:</span> <span class="string">prod</span></span><br><span class="line">   </span><br><span class="line"><span class="bullet"> -</span><span class="bullet">--</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></p><h2 id="3-激活指定的profile"><a href="#3-激活指定的profile" class="headerlink" title="3.激活指定的profile"></a>3.激活指定的profile</h2><h3 id="1-在application-properties下"><a href="#1-在application-properties下" class="headerlink" title="1.在application.properties下"></a>1.在application.properties下</h3><p>spring.profiles.active={profile}<br>例如</p><blockquote><blockquote><p>spring.profiles.active=dev</p></blockquote></blockquote><h3 id="2-在yml下激活"><a href="#2-在yml下激活" class="headerlink" title="2. 在yml下激活"></a>2. 在yml下激活</h3><p>假设我们要激活dev<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span> <span class="comment">#指定属于哪个环境</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">test</span> <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure></p><h3 id="3-命令行激活"><a href="#3-命令行激活" class="headerlink" title="3.命令行激活"></a>3.命令行激活</h3><p>–spring.profiles.active=dev(优先级大于profiles: active: dev的yml设置)<br>此命令行可以在idea的运行设置里面(Program arguments)的命令行参数添加也可以在打包成为jar包后的命令后添加为参数</p><blockquote><blockquote><p>java -jar XXXXX.jar –spring.profiles.active=dev</p></blockquote></blockquote><h3 id="4-虚拟机参数"><a href="#4-虚拟机参数" class="headerlink" title="4.虚拟机参数"></a>4.虚拟机参数</h3><p>VM option<br>在idea的运行设置里面(VM option)的命令参数添加即可</p><blockquote><blockquote><p>-Dspring.profiles.active=dev</p></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> springboot,学习笔记,注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-14 PropertySource和ImportResource配置文件占位符等</title>
      <link href="/2018/08/14/PropertySource%E5%92%8CImportResource%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8D%A0%E4%BD%8D%E7%AC%A6%E7%AD%89/"/>
      <url>/2018/08/14/PropertySource%E5%92%8CImportResource%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8D%A0%E4%BD%8D%E7%AC%A6%E7%AD%89/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>@PropertySource:<br>加载指定的配置文件;<br>例如<br>@PropertySource(value = {“classpath:person.properties”})</p><p>@ImportResource: 导入Spring的配置文件,让配置文件里面的内容生效;<br>SpringBoot里面没有Spring的配置文件,我们自己编写的配置文件也不能自动识别;<br>想让Spring的配置文件生效,加载进来;将 <strong>@ImportResource</strong> 标注在一个配置类上;<br>例如<br>@ImportResource(locations = {“classpath:bean.xml”})</p><p>SpringBoot给容器中添加组件的方式<br>推荐使用全注解的方式来添加组件<br>@Configuration<br>指明当前的类是一个配置类用来替代之间spring的配置文件(<bean></bean>)<br>@Bean<br>将方法的返回值添加到容器中,容器中这个组件默认的id就是方法名</p><p>@Bean 使用此注解给容器中添加组件</p><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><ol><li><p>随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>占位符获取之前匹配的值,如果没有可以使用 <strong>:</strong> 指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br></pre></td></tr></table></figure></li></ol><blockquote><blockquote><p>person.dog.name=${person.hello:hello}_dog</p></blockquote></blockquote><p>的意思是匹配前面的person.hello如果没有匹配到就传入默认的值hello</p>]]></content>
      
      
        <tags>
            
            <tag> springboot,注解,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-13关于SpringBoot默认生成文件的部分目录介绍和结构树</title>
      <link href="/2018/08/13/2018-8-13%E5%85%B3%E4%BA%8ESpringBoot%E9%BB%98%E8%AE%A4%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E7%9A%84%E9%83%A8%E5%88%86%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91/"/>
      <url>/2018/08/13/2018-8-13%E5%85%B3%E4%BA%8ESpringBoot%E9%BB%98%E8%AE%A4%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E7%9A%84%E9%83%A8%E5%88%86%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="关于springboot目录介绍"><a href="#关于springboot目录介绍" class="headerlink" title="关于springboot目录介绍"></a>关于springboot目录介绍</h2><blockquote><blockquote><p>├─.idea  /<em>idea的一些项目配置</em>/<br>│  ├─codeStyles<br>│  └─libraries<br>├─.mvn /<em>maven的一些配置</em>/<br>│  └─wrapper<br>├─src<br>│  ├─main<br>│  │  ├─java<br>│  │  │  └─com<br>│  │  │      ├─example<br>│  │  │      │  └─demo /<em>你的定义的包</em>/<br>│  │  │      └─orochi<br>│  │  └─resources<br>│  │      ├─static /<em>保存所有的静态资源 js,css,images;</em>/<br>│  │      └─templates /<em>保存所有的模板页面;freemarker,thymeleaf</em>/<br>│  └─test /<em>编写测试的时候的目录例如单元测试等</em>/<br>│      └─java<br>│          └─com<br>│              └─example<br>│                  └─demo<br>└─target /<em>生成文件或者打包后的文件所在目录等</em>/<br>    ├─classes<br>    │  └─com<br>    │      ├─example<br>    │      │  └─demo<br>    │      └─orochi<br>    ├─generated-sources<br>    │  └─annotations<br>    ├─generated-test-sources<br>    │  └─test-annotations<br>    └─test-classes<br>        └─com<br>            └─example<br>                └─demo</p></blockquote></blockquote><p>一般来说还有application.properties也就是springboot的应用配置文件;</p><h4 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h4><ol><li>application.properties</li><li>application.yml<br>这两种都是固定的全局配置文件<br>主要用于修改SpringBoot自动配置的默认值<br>因为YML是以数据为中心的,所以他比传统json和xml等更适合作为配置文件<br>yml —&gt; YAML<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>YAM的基本语法</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure></p><p><strong>数组(List、Set)</strong><br>用- 值表示数组中的一个元素</p><blockquote><p>pets:<br>  -cat<br>  -dog<br>  -pig<br>行内写法<br>pets: [cat,dog,pig]</p></blockquote><p>注意yaml默认不识别tab键所以当要通过缩进的时候请乖乖的打空格<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line">  </span><br><span class="line"><span class="attr"> person:</span></span><br><span class="line"><span class="attr">   lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">   age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">   boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">   birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">   maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">   lists:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">     dog:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> con.atguigu.springboot.bean;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Dog&#123;"</span> + <span class="string">"name'"</span> + name + <span class="string">'\" + </span></span><br><span class="line"><span class="string">", age=" + age + </span></span><br><span class="line"><span class="string">'</span>&#125;<span class="string">';</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将配置文件中配置的每一个属性的值, 映射到这个组件中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定;</span></span><br><span class="line"><span class="comment">*  prefix = "person", 配置文件中哪个下面的所有属性进行——映射</span></span><br><span class="line"><span class="comment">*  只有这个组件是容器中的组件, 才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment"><span class="doctag">@ConfigurationProperties</span>(prefix = "person")</span></span><br><span class="line"><span class="comment">public class Person&#123;</span></span><br><span class="line"><span class="comment">private String lastName;</span></span><br><span class="line"><span class="comment">private Integer age;</span></span><br><span class="line"><span class="comment">private Boolean boss;</span></span><br><span class="line"><span class="comment">private Date birth;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">private Map&lt;String,Object&gt; maps;</span></span><br><span class="line"><span class="comment">private List&lt;Object&gt; lists;</span></span><br><span class="line"><span class="comment">private Dog dog;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">public String toString()&#123;</span></span><br><span class="line"><span class="comment">return "Person&#123;" +</span></span><br><span class="line"><span class="comment">"lastName='" + lastName + '\" + </span></span><br><span class="line"><span class="comment">", age=" + age + </span></span><br><span class="line"><span class="comment">", boss=" + boss + </span></span><br><span class="line"><span class="comment">", birth=" + birth + </span></span><br><span class="line"><span class="comment">", maps=" + maps + </span></span><br><span class="line"><span class="comment">", lists=" + lists +</span></span><br><span class="line"><span class="comment">", dog=" + dog +</span></span><br><span class="line"><span class="comment">'&#125;' ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>ConfigurationProperties和Value注解的区别对比</p><table><thead><tr><th style="text-align:left">区别</th><th style="text-align:left">@ConfigurationProperties</th><th style="text-align:left">@Value</th></tr></thead><tbody><tr><td style="text-align:left">功能</td><td style="text-align:left">批量注入配置文件中的属性</td><td style="text-align:left">一个个指定</td></tr><tr><td style="text-align:left">松散绑定(松散语法)</td><td style="text-align:left">支持(比方说lastname,lastName,last_name,last-name都能识别)</td><td style="text-align:left">不支持(不能识别)</td></tr><tr><td style="text-align:left">SpEL(Spring表达式)</td><td style="text-align:left">不支持</td><td style="text-align:left">支持</td></tr><tr><td style="text-align:left">JSR303数据校验</td><td style="text-align:left">支持</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">复杂类型封装</td><td style="text-align:left">支持</td><td style="text-align:left">不支持</td></tr></tbody></table><p>@Validated /<em>进行数据校验</em>/<br>比方说<br>@Email /<em>所填写数据必须是邮箱格式</em>/</p><p><strong>一般在某次业务逻辑中只需要获取配置文件的某一项值可以考虑使用@Value</strong><br><strong>如果我们编写了一个JavaBean来配置文件进行映射,我们就可以直接使用@ConfigurationProperties</strong></p>]]></content>
      
      
        <tags>
            
            <tag> SpringBoot,maven,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置</title>
      <link href="/2018/08/11/2018-8-10springboot%E5%B0%9A%E7%A1%85%E8%B0%B7%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E4%B9%8BHelloWorld%E5%85%A5%E9%97%A8%E7%BB%86%E8%8A%82%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/11/2018-8-10springboot%E5%B0%9A%E7%A1%85%E8%B0%B7%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E4%B9%8BHelloWorld%E5%85%A5%E9%97%A8%E7%BB%86%E8%8A%82%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>SpringBoot应用 当<strong>SpringBootApplication</strong>标注在某个类上表示这个类是Springboot的主配置类,SpringBoot<br>就会通过运行这个类的主(main)方法来启动SpringBoot应用;<br><strong>具体实现如下</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p>SpringBoot配置类 标注在某个类上的时候表示这是一个SpringBoot的配置类;<br><strong>具体实现如下</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>配置类上来标注这个注解 可以理解为配置文件;<br><strong>具体实现如下</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br></pre></td></tr></table></figure></p><h5 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h5><p><strong>配置类也是容器的一个组件</strong>;</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>开启自动配置功能,SpringBoot帮我们自动配置了所需要的包之类的依赖;<br><strong>具体实现如下</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure></p><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><p>@AutoConfigurationPackage 自动配置包<br><strong>具体实现如下</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br></pre></td></tr></table></figure></p><p>可以看到是由底层的Spring注解@import而来,给容器中导入一个组件;导入的组件由AutoConfigurationPackages.Registrar.class 类来指定<br><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/1.png" alt="enter description here"><br>==<strong>可以看出其作用就是将主配置类所在的包以及下面所有子包里面的所有组件扫描到Spring容器中</strong> #001180==</p><p><strong>给容器导入组件</strong><br>AutoConfigurationImportSelector; 自动导入组件选择器</p><blockquote><blockquote><p>public interface ImportSelector {<br>   /**</p><pre><code>* Select and return the names of which class(es) should be imported based on* the {@link AnnotationMetadata} of the importing @{@link Configuration} class.*/</code></pre><p>   String[] selectImports(AnnotationMetadata importingClassMetadata);</p></blockquote></blockquote><p>将所有需要导入的组件以全类名的方式返回;这些组件就会添加到容器中<br><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/4.png" alt="enter description here"><br>下断点debug后可以看到<br>通过接口的形式最终会给容器中导入非常多的自动配置类(xxxAutoConfiguration),就是给容器中导入这个场景需要的所有组件,并配置好这些组件;<br><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/6.png" alt="enter description here"><br>有了自动配置类,免去了我们手动编写配置注入功能组件等的工作;<br>通过 SpringFactoriesLoader.loadFactoryNames 方法返回EnableAutoConfiguration.class和classLoader<br><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/3.png" alt="enter description here"><br>可以看到我们通过获取类加载器(classload)获取资源后将它作为properties的文件形式传出来<br>而文件资源获取的位置可以看到 <strong>FACTORIES_RESOURCE_LOCATION</strong>;<br>从而拿出了工厂名(factoryClassName)<br><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/2.png" alt="enter description here"><br>SpringBoot在启动的时候从类路径的 <strong>META-INF/spring.factories</strong> 中获取 <strong>EnableAutoConfiguration</strong>指定的值,将这些值作为自动配置类导入到容器中,也就是实现了自动配置</p><p><img src="/2018/08/11/2018-8-10springboot尚硅谷视频学习之HelloWorld入门细节自动配置/5.png" alt="enter description here"><br>J2ee的整体方案和自动配置都在 <strong>springframework\boot\spring-boot-autoconfigure-*.jar</strong>这个jar包下;</p>]]></content>
      
      
        <tags>
            
            <tag> springboot, maven, 学习笔记, helloworld, 入门, 注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-8-2关于spring和springboot的初步学习</title>
      <link href="/2018/08/02/%E9%98%85%E8%AF%BBdudu%E5%A4%A7%E4%BD%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/02/%E9%98%85%E8%AF%BBdudu%E5%A4%A7%E4%BD%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="今天因为偶然的情况学习起了-springboot了解了一些不同"><a href="#今天因为偶然的情况学习起了-springboot了解了一些不同" class="headerlink" title="今天因为偶然的情况学习起了 springboot了解了一些不同"></a>今天因为偶然的情况学习起了 springboot了解了一些不同</h2><h4 id="区别"><a href="#区别" class="headerlink" title="区别:"></a>区别:</h4><ol><li>内部集成了tomcat</li><li>maven文件pom简化</li><li>解决了依赖等的自行配置</li><li>热部署</li></ol><p>阅读了<a href="http://tengj.top/2017/02/26/springboot1/#Spring-Boot%E7%B2%BE%E8%A6%81" target="_blank" rel="noopener">http://tengj.top/2017/02/26/springboot1/#Spring-Boot%E7%B2%BE%E8%A6%81</a> 大佬的博客后了解到</p><h2 id="关于maven文件pom的简化"><a href="#关于maven文件pom的简化" class="headerlink" title="关于maven文件pom的简化:"></a>关于maven文件pom的简化:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>MySpringHelllo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MySringTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>LATEST<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>LATEST<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;LATEST&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面就是基于mysql和springmvc的最简单的数据库添加的例子</p><h4 id="如下是springboot的pom页面例子"><a href="#如下是springboot的pom页面例子" class="headerlink" title="如下是springboot的pom页面例子"></a>如下是springboot的pom页面例子</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.orochi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这是父级依赖目的是简化查找version的操作该功能主要是通过本地的maven的.m2文件里的设置实现的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以不难看到导入的pom全部都简化了<version>这个标签<br>具体实现原因是因为导入了</version></p><blockquote></blockquote> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个标签之后除了自定义的java版本那一项其余的均没有使用version了<br>这个配置名为<strong>父级依赖</strong> 作用就是在导入后常用的大多数包都会免去version的标签<br>类似与本地cdn有木有o.o 具体包的maven默认依赖可以在.m2目录下的</p><blockquote><blockquote><p>.m2\repository\org\springframework\boot\spring-boot-dependencies\2.0.4.RELEASE</p></blockquote></blockquote><p>这个目录下查看到</p><p>此文还没写完持续更新溜ε=ε=ε=┏(゜ロ゜;)┛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br></pre></td></tr></table></figure><p>这个注解的作用是开启自动配置是SpringBoot的核心注解</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Controller</span></span><br></pre></td></tr></table></figure><p>这三个注解的作用是注解类里面的方法都以json格式输出<br><strong>RestController = ResponseBody + Controller</strong></p><h2 id="启动SpringBoot的三种方法"><a href="#启动SpringBoot的三种方法" class="headerlink" title="启动SpringBoot的三种方法"></a>启动SpringBoot的三种方法</h2><ol><li>main方法启动</li><li>使用命令<blockquote><p>mvn spring-boot:run启动</p></blockquote></li></ol><p>3.运行<strong>mvn package</strong>打包 然后 <strong>java- jar</strong>启动</p>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,spring,springboot,maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-7-30关于spring+maven+mysql的配置小记</title>
      <link href="/2018/07/30/javamysqlmaven/"/>
      <url>/2018/07/30/javamysqlmaven/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="关于spring-maven-mysql的配置学习"><a href="#关于spring-maven-mysql的配置学习" class="headerlink" title="关于spring+maven+mysql的配置学习"></a>关于spring+maven+mysql的配置学习</h2><h3 id="由于入坑java被迫得学习spring等框架于是乎在阳光明媚的早晨我苦逼的看起了spring的doc"><a href="#由于入坑java被迫得学习spring等框架于是乎在阳光明媚的早晨我苦逼的看起了spring的doc" class="headerlink" title="由于入坑java被迫得学习spring等框架于是乎在阳光明媚的早晨我苦逼的看起了spring的doc"></a>由于入坑java被迫得学习spring等框架于是乎在阳光明媚的早晨我苦逼的看起了spring的doc</h3><h2 id="本文主要借鉴了https-blog-csdn-net-wanghuiqi2008-article-details-46239753这篇博文-在此基础上由于我有新软件强迫症所以遇到了几个不大不小的问题"><a href="#本文主要借鉴了https-blog-csdn-net-wanghuiqi2008-article-details-46239753这篇博文-在此基础上由于我有新软件强迫症所以遇到了几个不大不小的问题" class="headerlink" title="本文主要借鉴了https://blog.csdn.net/wanghuiqi2008/article/details/46239753这篇博文,在此基础上由于我有新软件强迫症所以遇到了几个不大不小的问题"></a><strong>本文主要借鉴了<a href="https://blog.csdn.net/wanghuiqi2008/article/details/46239753" target="_blank" rel="noopener">https://blog.csdn.net/wanghuiqi2008/article/details/46239753</a>这篇博文,在此基础上由于我有新软件强迫症所以遇到了几个不大不小的问题</strong></h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="误区不理解maven"><a href="#误区不理解maven" class="headerlink" title="误区不理解maven"></a>误区不理解maven</h4><p>由于不理解maven的用法错误的理解为只是一个普通的项目管理工具类似git所以自行的github clone了spring5的源码编译试图导入idea进行操作(因为idea默认集成的spring工程只有spring4的)在编译中遇到了 <strong><em>javadoc无法编译的异常</em></strong> 于是看了看官方的issue和csdn的各种博文发现spring的编译的时候默认的makefile(\spring-framework\gradle\docs.gradle)是在linux下进行的所以文件目录在windows下会出现异常具体如下代码<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> schemaZip(type: Zip) &#123;</span><br><span class="line"><span class="keyword">group</span> = <span class="string">"Distribution"</span></span><br><span class="line">baseName = <span class="string">"spring-framework"</span></span><br><span class="line">classifier = <span class="string">"schema"</span></span><br><span class="line"><span class="keyword">description</span> = <span class="string">"Builds -$&#123;classifier&#125; archive containing all "</span> +</span><br><span class="line"><span class="string">"XSDs for deployment at http://springframework.org/schema."</span></span><br><span class="line">duplicatesStrategy <span class="string">'exclude'</span></span><br><span class="line">moduleProjects.<span class="keyword">each</span> &#123; subproject -&gt;</span><br><span class="line"><span class="keyword">def</span> Properties schemas = <span class="keyword">new</span> Properties();</span><br><span class="line">subproject.<span class="keyword">sourceSets</span>.main.resources.<span class="keyword">find</span> &#123;</span><br><span class="line">it.path.endsWith(<span class="string">"META-INF\spring.schemas"</span>)</span><br><span class="line">&#125;?.withInputStream &#123; schemas.load(it) &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">def</span> key : schemas.keySet()) &#123;</span><br><span class="line"><span class="keyword">def</span> shortName = key.replaceAll(<span class="regexp">/http.*schema.(.*).spring-.*/</span>, <span class="string">'$1'</span>)</span><br><span class="line">assert shortName != key</span><br><span class="line"><span class="keyword">File</span> xsdFile = subproject.<span class="keyword">sourceSets</span>.main.resources.<span class="keyword">find</span> &#123;</span><br><span class="line">it.path.endsWith(schemas.get(key))</span><br><span class="line">&#125;</span><br><span class="line">assert xsdFile != <span class="keyword">null</span></span><br><span class="line"><span class="keyword">into</span> (shortName) &#123;</span><br><span class="line"><span class="keyword">from</span> xsdFile.path</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经过观察发现是因为目录名在windows下\没有转义造成的于是乎就有了以下的改动<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> schemaZip(type: Zip) &#123;</span><br><span class="line"><span class="keyword">group</span> = <span class="string">"Distribution"</span></span><br><span class="line">baseName = <span class="string">"spring-framework"</span></span><br><span class="line">classifier = <span class="string">"schema"</span></span><br><span class="line"><span class="keyword">description</span> = <span class="string">"Builds -$&#123;classifier&#125; archive containing all "</span> +</span><br><span class="line"><span class="string">"XSDs for deployment at http://springframework.org/schema."</span></span><br><span class="line">duplicatesStrategy <span class="string">'exclude'</span></span><br><span class="line">moduleProjects.<span class="keyword">each</span> &#123; subproject -&gt;</span><br><span class="line"><span class="keyword">def</span> Properties schemas = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">subproject.<span class="keyword">sourceSets</span>.main.resources.<span class="keyword">find</span> &#123;</span><br><span class="line">it.path.endsWith(<span class="string">"META-INF\\spring.schemas"</span>)</span><br><span class="line">&#125;?.withInputStream &#123; schemas.load(it) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">def</span> key : schemas.keySet()) &#123;</span><br><span class="line"><span class="keyword">def</span> shortName = key.replaceAll(<span class="regexp">/http.*schema.(.*).spring-.*/</span>, <span class="string">'$1'</span>)</span><br><span class="line">assert shortName != key</span><br><span class="line"><span class="keyword">File</span> xsdFile = subproject.<span class="keyword">sourceSets</span>.main.resources.<span class="keyword">find</span> &#123;</span><br><span class="line">it.path.endsWith(schemas.get(key).replaceAll(<span class="string">'\\/'</span>,<span class="string">'\\\\'</span>))</span><br><span class="line">&#125;</span><br><span class="line">assert xsdFile != <span class="keyword">null</span></span><br><span class="line"><span class="keyword">into</span> (shortName) &#123;</span><br><span class="line"><span class="keyword">from</span> xsdFile.path</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外如果编译出现提示javadoc的乱码用edit打开后删除乱码的注释就好了</p><p><strong><em>然而这却不是正确食用maven+spring+mysql</em></strong> 的方法</p><h2 id="maven管理工具"><a href="#maven管理工具" class="headerlink" title="maven管理工具"></a>maven管理工具</h2><h3 id="通俗的讲就是自动帮你找包在哪个网站自动帮你下载的一个苦力-有点类似pip但是没那么恰当哈哈"><a href="#通俗的讲就是自动帮你找包在哪个网站自动帮你下载的一个苦力-有点类似pip但是没那么恰当哈哈" class="headerlink" title="通俗的讲就是自动帮你找包在哪个网站自动帮你下载的一个苦力 有点类似pip但是没那么恰当哈哈"></a>通俗的讲就是自动帮你找包在哪个网站自动帮你下载的一个苦力 有点类似pip但是没那么恰当哈哈</h3><p>关于详细的配置方法就不在此复述了</p><h1 id="搭建mysql时候遇到的坑"><a href="#搭建mysql时候遇到的坑" class="headerlink" title="搭建mysql时候遇到的坑"></a>搭建mysql时候遇到的坑</h1><h3 id="最新版的依赖以及语法问题"><a href="#最新版的依赖以及语法问题" class="headerlink" title="最新版的依赖以及语法问题"></a>最新版的依赖以及语法问题</h3><p>由于我有 <strong>最新版本</strong> 软件使用强迫症 所以笔者使用的mysql8 可能写的时候又更新了。。 在<a href="https://blog.csdn.net/wanghuiqi2008/article/details/46239753" target="_blank" rel="noopener">https://blog.csdn.net/wanghuiqi2008/article/details/46239753</a> 这篇博文中作者方法没有任何错误但是我却遇到了 branch mysql异常的错误<br>在此对比早期的连接语句和8后的改变:</p><blockquote><blockquote><p>jdbc:mysql://localhost:3306/mysql?useUnicode=true&amp;characterEncoding=utf-8</p></blockquote></blockquote><blockquote><blockquote><p>jdbc:mysql://localhost:3306/mysql?characterEncoding=utf-8&amp;serverTimezone=Hongkong&amp;useSSL=false</p></blockquote></blockquote><p>可以看到连接语句在连接方面新增了serverTimezone和useSSL两个设置前者必须要设置后者不设置的话会有警告(一片红不过能运行)</p><hr><h3 id="版本依赖问题"><a href="#版本依赖问题" class="headerlink" title="版本依赖问题"></a>版本依赖问题</h3><p>由于编写csdn博文的作者编写的比较早使用的一个依赖有点老笔者强迫症用 <strong>latest</strong> 时候荣幸的报错了</p><blockquote><blockquote><p>Error:(47, 38) java: 无法访问org.springframework.dao.DataAccessException<br>  找不到org.springframework.dao.DataAccessException的类文件</p></blockquote></blockquote><p>  这样一个报错<br>  此时我的xml配置部分如下:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>LATEST<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 经过查看官方maven网站发现依赖的变更</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次运行发现解决问题不再报错</p><p>最后感慨一句 还是python舒服 😔<br>ε=ε=ε=┏(゜ロ゜;)┛</p>]]></content>
      
      
        <tags>
            
            <tag> java,spring,mysql,maven,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-7-25java快排学习</title>
      <link href="/2018/07/25/java%E5%BF%AB%E6%8E%92%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/07/25/java%E5%BF%AB%E6%8E%92%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="快速排列算法学习"><a href="#快速排列算法学习" class="headerlink" title="快速排列算法学习"></a>快速排列算法学习</h2><h3 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理:"></a>数学原理:</h3><blockquote><blockquote><p>设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用第一个数据）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。一趟快速排序的算法是</p><blockquote><p> 　　1）设置两个变量I、J，排序开始的时候：I=0，J=N-1； 　　<br> 　　2）以第一个数组元素作为关键数据，赋值给X，即 X=A[0]； 　　<br> 　　3）从J开始向前搜索，即由后开始向前搜索（J=J-1），找到第一个小于X的值，让该值与X交换； 　　4）从I开始向后搜索，即由前开始向后搜索（I=I+1），找到第一个大于X的值，让该值与X交换<br> 　　5）重复第3、4步，直到 I=J；</p></blockquote></blockquote></blockquote><h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p><code>49(X) 38 65 97 76 13 27</code></p><h4 id="首先设置关键值X-我是将49看作关键"><a href="#首先设置关键值X-我是将49看作关键" class="headerlink" title="首先设置关键值X 我是将49看作关键"></a>首先设置关键值X 我是将49看作关键</h4><p>经过第一次转换<br><code>27 38 65 97 76 13 49(X)</code><br><code>27 38 49(X) 97 76 13 65</code><br><code>27 38 13 97 76 49(X) 65</code><br><code>27 38 13 49(X) 76 97 65</code></p><hr><h3 id="因为可以看到此时I-J"><a href="#因为可以看到此时I-J" class="headerlink" title="因为可以看到此时I=J"></a>因为可以看到此时I=J</h3><p>所以将49隔离也就成了如下样子<br><code>27 38 13 |49| 76 97 65</code><br><strong>然后左右分别执行快排</strong><br>最后就得出了:<br><code>13 27 38 |49| 65 76 97</code><br>至此快排完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSortTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> head, <span class="keyword">int</span> tail)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head &gt;= tail || arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//设置特殊情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = head,j =tail, pivot = arr[(head + tail) / <span class="number">2</span>];</span><br><span class="line">        <span class="comment">//执行步骤3</span></span><br><span class="line">        <span class="keyword">while</span>(head &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[i] &lt; pivot)&#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(arr[j] &lt; pivot)&#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;<span class="comment">//判断是否满足排序条件</span></span><br><span class="line">                <span class="keyword">int</span> t = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = t;</span><br><span class="line">                ++i;</span><br><span class="line">                --j;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == j)&#123;<span class="comment">//满足第一次排序算法的结束条件</span></span><br><span class="line">                ++i;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        qSort(arr, head, j);</span><br><span class="line">        qSort(arr, i, tail);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>&#125;;</span><br><span class="line">        qSort(array, <span class="number">0</span>,array.length -<span class="number">1</span>);</span><br><span class="line">        String out = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> digit : array) &#123;</span><br><span class="line">            out += (digit + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记,java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-7-19 Java编程思想学习</title>
      <link href="/2018/07/20/%E9%9A%8F%E7%AC%94%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/07/20/%E9%9A%8F%E7%AC%94%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="最好不要用private-static可能造成内存泄漏"><a href="#最好不要用private-static可能造成内存泄漏" class="headerlink" title="最好不要用private static可能造成内存泄漏"></a>最好不要用private static可能造成内存泄漏</h3><hr><h3 id="java没有goto语句但是可以用-label-代替-但是不涉及到底层硬件编程最好别用"><a href="#java没有goto语句但是可以用-label-代替-但是不涉及到底层硬件编程最好别用" class="headerlink" title="java没有goto语句但是可以用 label: 代替 但是不涉及到底层硬件编程最好别用"></a>java没有goto语句但是可以用 label: 代替 但是不涉及到底层硬件编程最好别用</h3><hr><h2 id="区分java的重载的几种方法"><a href="#区分java的重载的几种方法" class="headerlink" title="区分java的重载的几种方法"></a>区分java的重载的几种方法</h2><p>1 通过方法所传参数的区别</p><p>2 通过方法所传参数的顺序</p><p>3 通过方法所传参数的返回值</p><hr><p><strong>Java中对象可能不被垃圾回收 垃圾回收并不等于析构</strong></p><p><strong>垃圾回收机制不等于所有对象都释放了内存</strong></p><p><strong>finalize我不太懂</strong></p><hr><p><strong>内部类</strong> <del>233</del><br>每个内部类都能独立地继承自一个接口的实现,所以无论外围类是否已经继承了某个接口的实现,对于内部类没有影响.</p><h2 id="内部类不能通过外部类继承后重新定义而覆盖"><a href="#内部类不能通过外部类继承后重新定义而覆盖" class="headerlink" title="内部类不能通过外部类继承后重新定义而覆盖"></a>内部类不能通过外部类继承后重新定义而覆盖</h2><p><strong>持有对象这一节得有空重看 再就是内部类</strong><del>313</del></p><p><strong>对于java的List和String转换传值</strong><br>如果你有一个List但是你需要返回的是String的时候<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;a= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">a.add(你要添加的操作.toString());</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Java编程思想,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-7-20 Java编程思想学习</title>
      <link href="/2018/07/20/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%BC%82%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/20/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%BC%82%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Java异常的学习"><a href="#Java异常的学习" class="headerlink" title="Java异常的学习"></a>Java异常的学习</h2><h3 id="异常使用指南"><a href="#异常使用指南" class="headerlink" title="异常使用指南"></a>异常使用指南</h3><p><strong>在以下情况下使用异常</strong></p><ol><li>在恰当的级别处理问题</li><li>解决问题并且重新调用产生异常的方法</li><li>进行少许修补,然后绕过异常发生的地方继续执行</li><li>用别的数据进行计算,以代替方法预计会返回的值</li><li>把当前运行环境下能做的事情尽量做完,然后将相同的异常抛到更高层</li><li>把当前运行环境下能做的事情尽量昨晚,然后把不相同的异常抛到更高层</li><li>终止程序</li><li>进行简化</li><li>让类库和程序更加安全</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Java编程思想,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/20/hello-world/"/>
      <url>/2018/07/20/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
